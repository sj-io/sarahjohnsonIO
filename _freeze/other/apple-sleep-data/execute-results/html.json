{
  "hash": "1eb25aa8986b119b115785d0447f42eb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Analyze Apple Health sleep data with R\"\nfreeze: auto\ntoc: true\ntoc-location: left\nlayout: full\ndate: \"2023-12-14\"\ndate-modified: \"2024-03-13\"\nimage: \"preview-image.png\"\ncategories:\n  - R\n  - health\n  - xml2\n  - ggplot2\nlightbox: true\nauthor: \n  - name: Sarah Johnson\n    url: https://sarahjohnson.io\ncitation: true\ndraft: true\n---\n\n\nI've always struggled with falling asleep early, so I purchased an Apple Watch to monitor my sleep. This post details how to access your Apple Health data and analyze it.\n\n# Export your Health data {#get-data}\n\nUnfortunately I could not find a direct way to access the health data, but you can export it from the Apple Health app by clicking on your profile.\n\n::: {layout-ncol=2}\n![Click your profile picture.](apple-health-get-sleep-data-1.PNG)\n\n![Scroll to the bottom and export data.](apple-health-get-sleep-data-2.PNG)\n:::\n\nNote that this exports all of your health data, so it will likely be a large file.\n\nThe export is a zipped folder, which I airdropped to my Mac and unzipped. The file that contains all your data is `export.xml`.\n\n# Convert XML to a table\n\nWe can use the `xml2` package to access this data in R. First, load your libraries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(c(\"tidyverse\", \"arrow\"))\nlibrary(tidyverse)\nlibrary(xml2)\nlibrary(arrow) # optional\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n`xml2` is included in the `tidyverse` and does not need to be installed separately. I use the `arrow` package to save the cleaned data as parquet files because they take up less space than csv files and load faster.\n\n### Read the XML file\n\nFirst, read the xml file using the `xml2::read_xml()` function.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nxml <- read_xml(\"/Users/JaneDoe/Data/apple_health_export/export.xml\")\n```\n:::\n\n\nThis file is large and takes up a lot of memory, so let's narrow down to the information we need and export the data to something easier to work with.\n\n### Access health records\n\nThere's some valuable information at the top of the xml document on what tables are included in the file and related metadata. This post will focus on the **Record** table, but other data available includes Activity Summary, Workout, Clinical Record, and more.\n\nBelow are the attributes for the Records data, which we will turn into columns.\n\n![](apple-health-records-attributes.png)\n\nUse `xml_find_all(\"//Record\")` to narrow the xml document to just your health records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxml_records <- xml |> xml_find_all(\"//Record\")\ncol_names <- c(\"type\", \"sourceName\", \"sourceVersion\", \"creationDate\", \"startDate\", \"endDate\", \"value\", \"unit\")\n```\n:::\n\n\nCreate a `col_names` vector to list which information you want to pull from each element.\n\n### XML attribute data to table\n\nConverting data from an XML document to a table is a learning experience. I attempted to use [Taras Kaduk's](https://taraskaduk.com/posts/2019-03-23-apple-health/) method of using `XML::xmlAttrsToDataFrame()` function, only to find the function no longer exists. When I tried using `XML::xmlToDataFrame()`, the process took so long I was worried R would hang.\n\nInstead, I created an `xml_to_tibble()` function to gather this data.^[This function was inspired by previous XML data wrangling functions I'd created for my Mario Kart speedrunning R package, [`mk8dx`](https://github.com/sj-io/mk8dx), specifically the [`mk_lss()`](https://github.com/sj-io/mk8dx/blob/main/R/mk_lss.R) function.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattr_to_col <- function(xml, attr_cols) {\n  as_tibble_col(xml_attr(xml, attr_cols), column_name = attr_cols)\n}\n\nxml_to_tibble <- function(xml_data, attr_cols) {\n  map(attr_cols, ~ {attr_to_col(xml_data, .x)}) |> list_cbind()\n}\n```\n:::\n\n\nFirst, the `attr_to_col()` function pulls attribute data from each xml element. This data is placed in a column; the length of the column will be the same as the number of records in the xml data. Attributes missing from an element will have a value of NA.\n\nThe `xml_to_tibble()` function runs the above function for each attribute defined in `col_names`. Then, all the columns are binded together into one table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecords <- xml_to_tibble(xml_records, col_names) |> \n  mutate(\n    across(ends_with(\"Date\"), ~ as_datetime(.x) |> with_tz(\"US/Central\")),\n    type = str_remove_all(type, \"HK(Category|Quantity)TypeIdentifier\"),\n    value = str_remove_all(value, \"HKCategoryValue(SleepAnalysis)?\")\n  )\n```\n:::\n\n\nClean up your records table by converting date columns and making some values more legible.\n\nNote this changes all date columns to US/Central timezone; excluding the timezone adjustment keeps all data in UTC time. I might adjust my code in the future to use the local timezone of wherever the data was collected.\n\n### Narrow for sleep data\n\nThe records table contains a lot of information. You can use `unique(records$type)` to see all available data^[[Taras Kaduk's](https://taraskaduk.com/posts/2019-03-23-apple-health/) blog post also shows other data available for analysis.], but this post will focus on sleep data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_data <- records |> \n  filter(type == \"SleepAnalysis\") |> \n  select(-c(type, unit))\n```\n:::\n\n\nNow that we have the XML data in tables, let's save it in a different format so it's easier to manage.\n\n### Save data\n\nSave the data with `write_parquet()` or `write_csv()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save data as parquet (requires arrow package)\nwrite_parquet(records, paste0(path, \"health/records.parquet\"))\nwrite_parquet(sleep_data, paste0(path, \"health/sleep.parquet\"))\n\n# alt: save as a csv file (larger file size)\nwrite_csv(sleep_data, paste0(path, \"health/sleep.csv\"))\nwrite_csv(records, paste0(path, \"health/health.csv\"))\n```\n:::\n\n\nCongratulations! You now have all your health records saved in an easy format.\n\n# Analyze your sleep data\n\nTo access the data again, just use `read_parquet()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sleep_data <- read_parquet(paste0(path, \"health/sleep.parquet\"))\nsleep_data <- read_csv(paste0(path, \"health/sleep.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 14068 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): sourceName, sourceVersion, value\ndttm (3): creationDate, startDate, endDate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n  # filter(str_detect(sourceName, \"Watch\"))\n\nglimpse(sleep_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 14,068\nColumns: 6\n$ sourceName    <chr> \"iPhone fyi\", \"iPhone fyi\", \"Sarah’s Apple Watch\", \"Sara…\n$ sourceVersion <chr> \"16.3\", \"16.3\", \"9.3.1\", \"9.3.1\", \"9.3.1\", \"9.3.1\", \"9.3…\n$ creationDate  <dttm> 2023-04-13 12:39:18, 2023-04-13 12:39:18, 2023-04-13 12…\n$ startDate     <dttm> 2023-04-13 03:00:00, 2023-04-13 05:40:39, 2023-04-13 06…\n$ endDate       <dttm> 2023-04-13 05:29:03, 2023-04-13 05:46:53, 2023-04-13 06…\n$ value         <chr> \"InBed\", \"InBed\", \"AsleepCore\", \"InBed\", \"Awake\", \"Aslee…\n```\n\n\n:::\n:::\n\n\nThe **value** column shows what type of sleep activity was recorded. The **startDate** and **endDate** details when the activity took place. The **creationDate** is linked to a group of sleep activity, like one night's worth of sleep. \n\nThis post will focus on rows where I'm asleep, so let's filter for that. All of these rows will start with \"Asleep\" in the **value** column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasleep <- sleep_data |> \n  filter(str_detect(value, \"Asleep\")) |> \n  mutate(value = str_remove(value, \"Asleep\"),\n         creationDate = date(creationDate),\n         creationDate = if_else((date(creationDate) - date(startDate) >= 2), date(endDate), date(creationDate)),\n         ) |> \n  select(-starts_with(\"source\"))\n```\n:::\n\n\nI also changed the **creationDate** to remove the time for easier future use.\n\nClick below to see theme options for my plots.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ggrounded)\n\nlibrary(showtext)\nfont_add(family = \"SF Pro\", regular = \"SF-Pro.ttf\", bold = \"SF-Pro.ttf\")\nfont_add(family = \"SF Pro Rounded\", regular = \"SF-Pro-Rounded-Regular.otf\", bold = \"SF-Pro-Rounded-Bold.otf\")\nshowtext_auto()\n\nsleep_colors <- c(\n  \"REM\" = \"#80CFF9\",\n  \"Core\" = \"#3A81F6\",\n  \"Deep\" = \"#35339C\",\n  \"Unspecified\" = \"#87E3E0\"\n)\n# colors from Apple Health app\n\nsleep_theme <- theme(\n    plot.margin = margin(1.5, 1, 1, 1.25, \"cm\"),\n    plot.background = element_rect(fill = \"#1C1B1D\"),\n    panel.grid = element_line(color = \"#4B4A4C\"),\n    text = element_text(colour = \"#94949B\", family = \"SF Pro Rounded\"),\n    axis.title.y = element_text(vjust = 5),\n    axis.text = element_text(color = \"#94949B\"),\n    plot.title = element_text(colour = \"white\", vjust = 4, size = 24, face = \"bold\"),\n    plot.caption = element_text(face = \"bold\", size = 10)\n  )\n```\n:::\n\n\n## Sleep by day of week\n\nHow much sleep do I average for each night of the week?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_by_wday <- asleep |> \n  mutate(activity_amount = endDate - startDate) |> \n  summarise(daily_sleep = sum(activity_amount), .by = creationDate) |> \n  mutate(wday = wday(creationDate, \n                     label = TRUE, abbr = FALSE)) |> \n  summarise(wday_sleep = mean(daily_sleep), .by = wday) |> \n  mutate(readable = seconds_to_period(wday_sleep))\n```\n:::\n\n\nGet the amount of sleep for each record by subtracting the **endDate** by the **startDate**. Group by **creationDate** to sum up all sleep activity for each night.\n\nThen, use `lubridate::wday()` function to get the day of the week. Finally, find the average amount of sleep for each weekday. The total will be given in seconds; turn this into a readable format with `seconds_to_period()`.\n\nTurn the table into a graph with ggplot's `geom_col()`, or `ggrounded::geom_col_rounded()` for a bar graph with rounded edges.\n\n::: {.panel-tabset}\n\n### Graph\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](apple-sleep-data_files/figure-html/unnamed-chunk-14-1.png){width=768}\n:::\n:::\n\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_by_wday |>\n  ggplot() +\n  geom_col_rounded(aes(\n    x = wday,\n    y = wday_sleep,\n    fill = as.numeric(wday_sleep)\n  )) +\n  scale_y_time(labels = scales::label_time(format = \"%H H\")) +\n  scale_fill_gradient(low = \"#35339C\", high = \"#80CFF9\") +\n  theme_minimal() +\n  labs(title = \"Average sleep by day of week\",\n       y = \"\", x = \"\",\n       caption = \"sarahjohnson.io\") +\n  theme(legend.position = \"none\") +\n  sleep_theme\n```\n:::\n\n\n:::\n\n\n::: {.cell}\n\n:::\n\n\nI get the most sleep on **Saturdays** where I average **8H 3M 14S**. I sleep the least on **Tuesdays** with an average of **6H 14M 44S**. \n\n## Sleep cycle amounts\n\nHow much of each sleep cycle do I experience each night?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncycle_by_day <- asleep |>\n  mutate(cycle_amount = endDate - startDate) |>\n  summarise(cycle_amount = sum(cycle_amount),\n            .by = c(\"creationDate\", \"value\"))\n```\n:::\n\n\nAgain get the amount of sleep activity for each row and sum the amounts. This time we will also group by the **value** column which defines the type of sleep activity.\n\n::: {.panel-tabset}\n\n### Stack\n\n\n::: {.cell .column-screen-inset-right}\n::: {.cell-output-display}\n![](apple-sleep-data_files/figure-html/unnamed-chunk-18-1.png){width=1152}\n:::\n:::\n\n\n### Fill\n\n\n::: {.cell .column-screen-inset-right}\n::: {.cell-output-display}\n![](apple-sleep-data_files/figure-html/unnamed-chunk-19-1.png){width=1152}\n:::\n:::\n\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncycle_by_day |>\n  ggplot() +\n  geom_col_rounded(aes(x = creationDate, y = cycle_amount, fill = value),\n                   radius = grid::unit(1, \"pt\")\n                   # position = \"fill\"\n                   ) +\n  geom_vline(aes(xintercept = as_date(\"2023-12-23\")), color = \"pink\", linewidth = .5) +\n  geom_vline(aes(xintercept = as_date(\"2024-01-03\")), color = \"pink\", linewidth = .5) +\n  scale_fill_manual(values = sleep_colors) +\n  scale_y_time(expand = c(0, 0),\n               breaks = seq(3600, 43200, by = 3600),\n               minor_breaks = NULL,\n               labels = scales::label_time(format = \"%HH\")) +\n  scale_x_date(expand = c(0, 5),\n               breaks = \"1 month\",\n               minor_breaks = NULL,\n               date_labels = \"%b\") +\n  theme_minimal() +\n  labs(\n    title = \"Daily sleep cycles\",\n    x = \"\",\n    y = \"\",\n    fill = \"Sleep Stage\",\n    caption = \"sarahjohnson.io\"\n  ) +\n  theme(legend.position = \"bottom\",\n        legend.box.margin = margin(.25, 4.5, 0, 0, unit = \"cm\")) +\n  sleep_theme\n```\n:::\n\n\n:::\n\n\n::: {.cell}\n\n:::\n\n\nExcluding unspecified sleep stages, core sleep makes up 67% of my sleep cycles; deep sleep is 11%; and REM sleep makes up 23%.\n\n## Sleep cycle activity\n\nHow do I make a sleep graph similar to the one in Apple's Health app?\n\n<center>\n![](apple-health-sleep-graph.jpg){width=40%}\n</center><br>\n\nI've always wanted to view the sleep cycle for all days at once. However, the graph needs some adjustments to plot correctly.\n\nIf you attempt to use the **startDate** or **endDate** on the y-axis, the dates will prevent the times from aligning. The result is a bunch of very short lines stacking diagonally into oblivion. Use `hms::as_hms()` to pull just the time.^[`lubridate::hms()` is used for time periods, like a race that takes 3H 42M 6S.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncycle_activity <- asleep |>\n  mutate(start_time = hms::as_hms(startDate),\n         end_time = hms::as_hms(endDate)) |>\n  mutate(across(ends_with(\"_time\"), ~ ifelse(\n    as.numeric(.x) <= 64800,\n    .x + hms::hms(0, 0, 24),\n    .x\n  ) |> hms::as_hms()))\n```\n:::\n\n\nThe next problem I ran into was that sleep starts on one night and ends on the next. If you do not adjust the hours and y-axis, you'll have a disjoined graph. Assuming a normal sleep schedule, a bit of the data will be at the bottom (for hours slept between ~10PM/22:00 to midnight) and a large amount towards the top (for midnight/00:00 to wake-up), and there will be a large gap of no data in the middle for hours you are awake.\n\nTo correct for this, pick a halfway time where any value under this period has 24 hours added. The halfway time should be a period where you were awake on all days (so if there isn't a time like that for you, stick with the regular 24-hour cycle).\n\nThere was one sliver of time around 6:00 PM where I was awake on all days. I decided all times before 6PM (64800 seconds) to add 24 hours. If I had a cycle that started at 11:55PM/23:55 and ended at 12:05AM/00:05, the end time would now read as 24:05. The graph would originally show two 5 minute chunks at the top and bottom of the graph, now will show one 10 minute bar in the middle of the graph. Thankfully ggplot's labelling automatically turns these times into values like \"6AM\". \n\nLastly, I wanted to see my typical wake and sleep times, but with the day-to-day variances smoothed out. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_start <- cycle_activity |> \n  slice_min(start_time, by = \"creationDate\")\n\nsleep_end <- cycle_activity |> \n  slice_max(end_time, by = \"creationDate\")\n```\n:::\n\n\nTo get this data, just slice your earliest and latest sleep time for each day.\n\n::: {.panel-tabset}\n\n### Sleep Activity\n\n\n::: {.cell .column-screen-inset-right}\n::: {.cell-output-display}\n![](apple-sleep-data_files/figure-html/unnamed-chunk-24-1.png){width=1152}\n:::\n:::\n\n\n\n### Smooth Sleep/Wake\n\n\n::: {.cell .column-screen-inset-right}\n::: {.cell-output-display}\n![](apple-sleep-data_files/figure-html/unnamed-chunk-25-1.png){width=1152}\n:::\n:::\n\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_rect(\n    data = cycle_activity,\n    aes(\n      xmin = creationDate,\n      xmax = creationDate + days(1),\n      ymin = start_time,\n      ymax = end_time,\n      color = value,\n      fill = value\n    ),\n    linejoin = \"round\"\n  ) +\n  geom_smooth(data = sleep_start, aes(x = creationDate, y = start_time)) +\n  geom_smooth(data = sleep_end, aes(x = creationDate, y = end_time)) +\n  scale_color_manual(values = sleep_colors,\n                     aesthetics = c(\"colour\", \"fill\")) +\n  scale_x_date(expand = c(0, 5),\n               breaks = \"1 month\",\n               date_labels = \"%b\") +\n  scale_y_time(expand = c(0, 0),\n               breaks = seq(64800, 151200, by = 7200),\n               # breaks = seq(48000, 134400, by = 7200), # 3600 = 1H\n               minor_breaks = NULL,\n               labels = scales::label_time(format = \"%I %p\")) + # %H for 24-hour time\n  theme_minimal() +\n  labs(\n    x = \"\",\n    y = \"Time\",\n    title = \"Daily sleep activity\",\n    caption = \"sarahjohnson.io\"\n  ) +\n  theme(legend.position = \"none\") +\n  sleep_theme\n```\n:::\n\n\n:::\n\n\n::: {.cell}\n\n:::\n\n\nThe month where I averaged the most sleep was **March** with an average of **7H 41M 35S** per night. The month with the least was **June** with an average of **6H 26M 44S** per night. I woke up the earliest on average in **June** at around **13:16:53** and the latest in **February** at around **16:21:17**. I went to bed the earliest on average in **February** at around **05:59:51** and the latest in **November** at around **07:30:46**.\n\n## Sleep heatmap\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_heatmap <- asleep |> \n  mutate(activity_amount = endDate - startDate) |> \n  summarise(daily_sleep = sum(activity_amount), .by = creationDate) |> \n  mutate(wday = wday(creationDate, label = TRUE),\n         year = year(creationDate),\n         week = week(creationDate),\n         week = case_when(\n           year == \"2024\" ~ week + 52,\n           .default = week\n         )\n           )\n```\n:::\n\n\n::: {.panel-tabset}\n\n### Heatmap\n\n\n::: {.cell .column-screen-inset-right}\n::: {.cell-output-display}\n![](apple-sleep-data_files/figure-html/unnamed-chunk-29-1.png){width=1152}\n:::\n:::\n\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleep_heatmap |> \n  ggplot(aes(x = week, y = wday, fill = as.numeric(daily_sleep)/3600)) +\n  geom_tile() +\n  scale_x_continuous(\n    breaks = c(18, 23, 27, 32, 36, 40, 44, 49, 53, 57, 62),\n    labels = c(\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\")\n  ) +\n  scale_fill_gradient(high = \"#35339C\", low = \"#80CFF9\",\n                      breaks = seq(0, 15, by = 3)\n                      ) +\n  coord_equal() +\n  theme_minimal() +\n  labs(x = \"\", y = \"\", title = \"Weekly sleep heatmap\", \n       fill = \"Hours of sleep\", caption = \"sarahjohnson.io\") +\n  guides(fill = guide_legend(title.position = \"top\",\n                             label.position = \"bottom\")) +\n  theme(legend.position = \"bottom\",\n        legend.box.margin = margin(0, 9, 0, 0, unit = \"in\"),\n        panel.grid.major = element_blank()) +\n  sleep_theme\n```\n:::\n\n\n:::\n\n\n::: {.cell}\n\n:::\n\nTo find my sleep debt, I subtracted by nightly sleep time by 7 hours. If I slept 4 hours, I would have 3 hours of sleep debt. \n\nSince I began tracking my sleep, my total sleep debt is **22.76 hours**.\n\n## Acknowledgments {.appendix}\n\nInspiration for this post from [Jon Busby's blog](https://www.jonbusby.co.uk/2021/06/analysing-apple-health-data-in-python-part-1-extraction-and-sleep-data/), who used Python to access this data.\n\n[Taras Kaduk's blog](https://taraskaduk.com/posts/2019-03-23-apple-health/) who also used R to gather Apple Health data; also inspired heat map.\n\n[Relevant Miscellany](https://www.relevantmisc.com/r/2020/06/01/baby-sleep-radial/)'s sleep data mapping also helped inspire this post.\n\n[This stackoverflow question](https://stackoverflow.com/questions/68578242/plot-arrival-and-departure-times-that-cross-midnight) helped me figure out how to graph across midnight.\n",
    "supporting": [
      "apple-sleep-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}